// Code generated by MockGen. DO NOT EDIT.
// Source: healthcheck.go

// Package healthcheck is a generated GoMock package.
package healthcheck

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHealthcheck is a mock of Healthcheck interface.
type MockHealthcheck struct {
	ctrl     *gomock.Controller
	recorder *MockHealthcheckMockRecorder
}

// MockHealthcheckMockRecorder is the mock recorder for MockHealthcheck.
type MockHealthcheckMockRecorder struct {
	mock *MockHealthcheck
}

// NewMockHealthcheck creates a new mock instance.
func NewMockHealthcheck(ctrl *gomock.Controller) *MockHealthcheck {
	mock := &MockHealthcheck{ctrl: ctrl}
	mock.recorder = &MockHealthcheckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthcheck) EXPECT() *MockHealthcheckMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockHealthcheck) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockHealthcheckMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHealthcheck)(nil).Close))
}

// HealthDB mocks base method.
func (m *MockHealthcheck) HealthDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthDB indicates an expected call of HealthDB.
func (mr *MockHealthcheckMockRecorder) HealthDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthDB", reflect.TypeOf((*MockHealthcheck)(nil).HealthDB))
}

// HealthKafka mocks base method.
func (m *MockHealthcheck) HealthKafka() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthKafka")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthKafka indicates an expected call of HealthKafka.
func (mr *MockHealthcheckMockRecorder) HealthKafka() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthKafka", reflect.TypeOf((*MockHealthcheck)(nil).HealthKafka))
}

// Watch mocks base method.
func (m *MockHealthcheck) Watch(errorCh chan<- struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Watch", errorCh)
}

// Watch indicates an expected call of Watch.
func (mr *MockHealthcheckMockRecorder) Watch(errorCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockHealthcheck)(nil).Watch), errorCh)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: metrics.go

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// IncCounterSuccessResponseForCreate mocks base method.
func (m *MockMetrics) IncCounterSuccessResponseForCreate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncCounterSuccessResponseForCreate")
}

// IncCounterSuccessResponseForCreate indicates an expected call of IncCounterSuccessResponseForCreate.
func (mr *MockMetricsMockRecorder) IncCounterSuccessResponseForCreate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCounterSuccessResponseForCreate", reflect.TypeOf((*MockMetrics)(nil).IncCounterSuccessResponseForCreate))
}

// IncCounterSuccessResponseForList mocks base method.
func (m *MockMetrics) IncCounterSuccessResponseForList() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncCounterSuccessResponseForList")
}

// IncCounterSuccessResponseForList indicates an expected call of IncCounterSuccessResponseForList.
func (mr *MockMetricsMockRecorder) IncCounterSuccessResponseForList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCounterSuccessResponseForList", reflect.TypeOf((*MockMetrics)(nil).IncCounterSuccessResponseForList))
}

// IncCounterSuccessResponseForMultiCreate mocks base method.
func (m *MockMetrics) IncCounterSuccessResponseForMultiCreate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncCounterSuccessResponseForMultiCreate")
}

// IncCounterSuccessResponseForMultiCreate indicates an expected call of IncCounterSuccessResponseForMultiCreate.
func (mr *MockMetricsMockRecorder) IncCounterSuccessResponseForMultiCreate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCounterSuccessResponseForMultiCreate", reflect.TypeOf((*MockMetrics)(nil).IncCounterSuccessResponseForMultiCreate))
}

// IncCounterSuccessResponseForRemove mocks base method.
func (m *MockMetrics) IncCounterSuccessResponseForRemove() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncCounterSuccessResponseForRemove")
}

// IncCounterSuccessResponseForRemove indicates an expected call of IncCounterSuccessResponseForRemove.
func (mr *MockMetricsMockRecorder) IncCounterSuccessResponseForRemove() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCounterSuccessResponseForRemove", reflect.TypeOf((*MockMetrics)(nil).IncCounterSuccessResponseForRemove))
}

// IncCounterSuccessResponseForUpdate mocks base method.
func (m *MockMetrics) IncCounterSuccessResponseForUpdate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncCounterSuccessResponseForUpdate")
}

// IncCounterSuccessResponseForUpdate indicates an expected call of IncCounterSuccessResponseForUpdate.
func (mr *MockMetricsMockRecorder) IncCounterSuccessResponseForUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCounterSuccessResponseForUpdate", reflect.TypeOf((*MockMetrics)(nil).IncCounterSuccessResponseForUpdate))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: metrics.go

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// CreateSuccessResponseIncCounter mocks base method.
func (m *MockMetrics) CreateSuccessResponseIncCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateSuccessResponseIncCounter")
}

// CreateSuccessResponseIncCounter indicates an expected call of CreateSuccessResponseIncCounter.
func (mr *MockMetricsMockRecorder) CreateSuccessResponseIncCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSuccessResponseIncCounter", reflect.TypeOf((*MockMetrics)(nil).CreateSuccessResponseIncCounter))
}

// ListSuccessResponseIncCounter mocks base method.
func (m *MockMetrics) ListSuccessResponseIncCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListSuccessResponseIncCounter")
}

// ListSuccessResponseIncCounter indicates an expected call of ListSuccessResponseIncCounter.
func (mr *MockMetricsMockRecorder) ListSuccessResponseIncCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuccessResponseIncCounter", reflect.TypeOf((*MockMetrics)(nil).ListSuccessResponseIncCounter))
}

// MultiCreateSuccessResponseIncCounter mocks base method.
func (m *MockMetrics) MultiCreateSuccessResponseIncCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MultiCreateSuccessResponseIncCounter")
}

// MultiCreateSuccessResponseIncCounter indicates an expected call of MultiCreateSuccessResponseIncCounter.
func (mr *MockMetricsMockRecorder) MultiCreateSuccessResponseIncCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiCreateSuccessResponseIncCounter", reflect.TypeOf((*MockMetrics)(nil).MultiCreateSuccessResponseIncCounter))
}

// RemoveSuccessResponseIncCounter mocks base method.
func (m *MockMetrics) RemoveSuccessResponseIncCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveSuccessResponseIncCounter")
}

// RemoveSuccessResponseIncCounter indicates an expected call of RemoveSuccessResponseIncCounter.
func (mr *MockMetricsMockRecorder) RemoveSuccessResponseIncCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSuccessResponseIncCounter", reflect.TypeOf((*MockMetrics)(nil).RemoveSuccessResponseIncCounter))
}

// UpdateSuccessResponseIncCounter mocks base method.
func (m *MockMetrics) UpdateSuccessResponseIncCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateSuccessResponseIncCounter")
}

// UpdateSuccessResponseIncCounter indicates an expected call of UpdateSuccessResponseIncCounter.
func (mr *MockMetricsMockRecorder) UpdateSuccessResponseIncCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSuccessResponseIncCounter", reflect.TypeOf((*MockMetrics)(nil).UpdateSuccessResponseIncCounter))
}
